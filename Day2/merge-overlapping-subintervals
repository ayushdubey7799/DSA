Both solution have same T.C. , just way of doing is different

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, Comparator.comparingInt(row -> row[0]));
        int n = intervals.length;
        int start = intervals[0][0]; // 1 
        int end = intervals[0][1]; // 3
        List<Pair> res = new ArrayList<>();

        int i = 0;
        while(i+1<n){
            if(end<intervals[i+1][0]){
                res.add(new Pair(start,end));
                start = intervals[i+1][0];
                end = intervals[i+1][1];
                i++;
            }
            else{
                if(end>=intervals[i+1][1]){
                   i++;
                }
                else if(i+1<n && end>=intervals[i+1][0]){
                    end = intervals[i+1][1];
                    i++;
                }
            }
        }
                res.add(new Pair(start,end));
                
        int[][] resMatrix = new int[res.size()][2];
        for(int j =0 ;j<res.size();j++){
            resMatrix[j][0] = res.get(j).x;
            resMatrix[j][1] = res.get(j).y;
        }

        return resMatrix;
    }
}

class Pair{
    int x;
    int y;
    Pair(int x,int y){
        this.x = x;
        this.y = y;
    }
}


=========================================================================




class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals,(a,b) -> {
            return a[0]-b[0];
        });
        int start = intervals[0][0];
        int end = intervals[0][1];
        List<int[]> list = new ArrayList<>();
        for(int i = 1;i<intervals.length;i++){
            if(end>=intervals[i][0]){
                 if(end<intervals[i][1]){
                     end = intervals[i][1];
                 }
            }
            else{
               list.add(new int[]{start,end});
               start = intervals[i][0];
               end = intervals[i][1];
            }
        }
        list.add(new int[]{start,end});
      return list.toArray(new int[0][0]);
    }
}

/*
1. Sort the intervals array based on 0th element
2. take 2 variable start and end pointig at 0th and 1st element of intervals[0] array
3. if end lies between the next pair --> change end to the 1st index of next pair
4. if end is greater than 1st index of next pair --> do nothing
5. if end is smaller than next element start position....then we will add it to our arraylist...and update start and end;

[1,3],[2,6],[8,10],[15,18]
 s       e   
 */

