Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
--------
Input: nums = [3,2,3]
Output: 3
--------
Input: nums = [2,2,1,1,1,2,2]
Output: 2
--------
Constraints:
n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
Follow-up: Could you solve the problem in linear time and in O(1) space?


class Solution {
    public int majorityElement(int[] arr) {
        int count = 0;
        int ele = -1; 

        for(int i = 0;i<arr.length;i++){
          if(ele==arr[i]){
              count++;
          }
          else if(count == 0){
              ele = arr[i];
          }
          else{
              count--;
          }
        }

        return ele;
    }
}
